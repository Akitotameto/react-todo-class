{"version":3,"sources":["components/header.js","components/todo-date-low.js","pages/list.js","components/form.js","pages/set.js","App.js","serviceWorker.js","index.js"],"names":["Header","pageList","props","history","push","pageSet","onClick","this","index","Component","TodoDateLow","todoData","map","item","key","id","title","content","createdAt","category","List","className","border","Form","onChange","value","console","log","setState","state","type","e","target","send","Set","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAqBeA,G,kNAlBXC,SAAW,WACP,EAAKC,MAAMC,QAAQC,KAAK,M,EAG5BC,QAAU,WACN,EAAKH,MAAMC,QAAQC,KAAK,S,uDAIxB,OACI,6BACI,4BAAQE,QAASC,KAAKN,UAAtB,SAA4D,IAArBM,KAAKL,MAAMM,OAAX,WAAvC,KACA,4BAAQF,QAASC,KAAKF,SAAtB,QAA0D,IAArBE,KAAKL,MAAMM,OAAX,WAArC,U,GAbKC,cCkBNC,E,uKAhBP,OACI,oCACCH,KAAKL,MAAMS,SAASC,KAAI,SAACC,GAAD,OACpB,wBAAIC,IAAKD,EAAKE,IACX,4BAAKF,EAAKE,IACV,4BAAKF,EAAKG,OACV,4BAAKH,EAAKI,SACV,4BAAKJ,EAAKK,WACV,4BAAKL,EAAKM,mB,GAVJV,aCEpBE,EAAW,CACb,CACII,GAAI,EACJC,MAAO,4BACPC,QAAS,8FACTC,UAAW,aACXC,SAAU,GAEd,CACIJ,GAAI,EACJC,MAAO,4BACPC,QAAS,4KACTC,UAAW,aACXC,SAAU,GAEd,CACIJ,GAAI,EACJC,MAAO,4BACPC,QAAS,+JACTC,UAAW,aACXC,SAAU,IA8BHC,E,uKAvBP,OACI,6BACI,kBAAC,EAAD,CAAQjB,QAASI,KAAKL,MAAMC,QAASK,MAAO,IAC5C,yBAAKa,UAAU,cACX,0CAGJ,2BAAOC,OAAO,IAAID,UAAU,WAC5B,4BACI,kCACA,wDACA,4CACA,4CACA,wDACA,6CAEJ,kBAAC,EAAD,CAAaV,SAAUA,U,GAnBpBF,a,QCaJc,E,kDAtCX,WAAYrB,GAAQ,IAAD,8BACf,cAAMA,IAOVsB,SAAW,SAACV,EAAKW,GACbC,QAAQC,IAAI,MAAOb,GACnBY,QAAQC,IAAI,QAASF,GACrB,EAAKG,SAAL,eACKd,EAAMW,KATX,EAAKI,MAAQ,CACTb,MAAO,IAJI,E,mDAiBfU,QAAQC,IAAI,wB,+BAGN,IAAD,OACL,OACI,6BACI,2DAAmB,6BACnB,2BAAOG,KAAK,OAAOL,MAAOlB,KAAKsB,MAAMb,MAAOQ,SAAU,SAAAO,GAAC,OAAI,EAAKP,SAAS,QAASO,EAAEC,OAAOP,UAAU,6BAErG,+CAAiB,6BACjB,8BAAUK,KAAK,OAAOL,MAAOlB,KAAKsB,MAAMZ,QAASO,SAAU,SAAAO,GAAC,OAAI,EAAKP,SAAS,UAAWO,EAAEC,OAAOP,UAAS,6BAE3G,2DAAmB,6BACnB,2BAAOK,KAAK,OAAOL,MAAOlB,KAAKsB,MAAMV,SAAUK,SAAU,SAAAO,GAAC,OAAI,EAAKP,SAAS,WAAYO,EAAEC,OAAOP,UAAS,6BAE1G,4BAAQnB,QAASC,KAAK0B,MAAtB,qB,GAjCGxB,aCcJyB,E,uKAVP,OACI,6BACI,kBAAC,EAAD,CAAQ/B,QAASI,KAAKL,MAAMC,QAASK,MAAO,IAC5C,wDACA,kBAAC,EAAD,W,GANEC,aCgBH0B,E,uKAXX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,OAAOC,UAAWJ,U,GANtBzB,aCKE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.94ff7ccd.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Header extends Component {\n    pageList = () => {\n        this.props.history.push('/')\n    }\n\n    pageSet = () => {\n        this.props.history.push('/set')\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.pageList}> List {this.props.index === 1 && `(avtive)`} </button>\n                <button onClick={this.pageSet}> Set {this.props.index === 2 && `(avtive)`} </button>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React, {Component} from 'react'\n\nclass TodoDateLow extends Component {\n    render() {\n        return(\n            <>\n            {this.props.todoData.map((item) =>\n                (<tr key={item.id}>\n                    <td>{item.id}</td>\n                    <td>{item.title}</td>\n                    <td>{item.content}</td>\n                    <td>{item.createdAt}</td>\n                    <td>{item.category}</td>\n                </tr>)\n            )}\n            </>\n        )\n    }\n}\n\nexport default TodoDateLow;","import React, { Component } from 'react'\nimport Header from  '../components/header'\nimport TodoDateLow from  '../components/todo-date-low'\n\nconst todoData = [\n    {\n        id: 1,\n        title: 'タイトル1',\n        content: '内容1内容1内容1内容1内容1内容1内容1',\n        createdAt: '2020-05-04',\n        category: 1,\n    },\n    {\n        id: 2,\n        title: 'タイトル2',\n        content: '内容2内容2内容2内容2内容2内容2内容2内容2内容2内容2内容2内容2内容2',\n        createdAt: '2020-05-04',\n        category: 2,\n    },\n    {\n        id: 3,\n        title: 'タイトル3',\n        content: '内容3内容3内容3内容3内容3内容3内容3内容3内容3内容3内容3内容3',\n        createdAt: '2020-05-04',\n        category: 1,\n    },\n]\n\nclass List extends Component {\n\n    render() {\n        return(\n            <div>\n                <Header history={this.props.history} index={1}/>\n                <div className='contents-1'>\n                    <h1>Todo List</h1>\n                </div>\n\n                <table border='1' className='table-1'>\n                <tr>\n                    <th>ID</th>\n                    <th>タイトル</th>\n                    <th>内容</th>\n                    <th>日時</th>\n                    <th>カテゴリ</th>\n                    <th>操作</th>\n                </tr>\n                <TodoDateLow todoData={todoData}/>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default List;","import React, { Component } from 'react'\n\nclass Form extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            title: ''\n        }\n    }\n\n    onChange = (key, value) => {\n        console.log('key', key)\n        console.log('value', value)\n        this.setState({\n            [key]: value\n        });\n    }\n\n    send(){\n        console.log('テスト')\n    }\n\n    render() {\n        return(\n            <div>\n                <label>タイトル</label><br />\n                <input type=\"text\" value={this.state.title} onChange={e => this.onChange('title', e.target.value)} /><br />\n\n                <label>内容</label><br />\n                <textarea type=\"text\" value={this.state.content} onChange={e => this.onChange('content', e.target.value)}/><br />\n\n                <label>カテゴリ</label><br />\n                <input type=\"text\" value={this.state.category} onChange={e => this.onChange('category', e.target.value)}/><br />\n\n                <button onClick={this.send}>送信</button>\n            </div>\n        )\n    }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport Header from  '../components/header'\nimport Form from  '../components/form'\n\nclass Set extends Component {\n    render() {\n        return(\n            <div>\n                <Header history={this.props.history} index={2} />\n                <h1>登録画面</h1>\n                <Form />\n            </div>\n        )\n    }\n}\n\nexport default Set;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './App.css';\nimport List from './pages/list'\nimport Set from './pages/set'\n\nclass App extends Component {\n  render() {\n    return(\n      <Router>\n        <Router>\n          <Route exact path='/' component={List} />\n          <Route path='/set' component={Set} />\n        </Router>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}